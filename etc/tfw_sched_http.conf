#
# The configuration file for the Tempesta FW "HTTP" load balancing scheduler.
#
# The HTTP scheduler is able to look inside a HTTP request and examine its
# fields such as URI and headers. The scheduler distributes HTTP requests over
# back-end servers depending on contents of these fields.
#
# The whole goal of this configuration is to provide a set of pattern-matching
# rules that map certain field valus to back-end servers. Say, something like:
#    if the HTTP request has URI "/foo/bar" then send it to server 10.0.0.1
#    if the HTTP request host is "*.example.com", then send it to 10.0.0.2
#    ...etc
#
# An example is located at the end of this file.
# That should help you to understand how the configuration should look like. 
# 
# "include" directives are not supported yet, so paste rules to your main
# configuration file. 
#

# TAG: sched_http_rules
#
# The section containing content-based load balancing rules.
# It allows to instruct the load balancer to send HTTP requests to a group
# of servers based on a HTTP request field: URI, Host, headers, etc.
#
# Syntax:
#   sched_http_rules {
#       match GROUP FIELD OP ARG;
#       ...
#   }
#
# GROUP is the reference to a previously defined 'srv_group'.
# FIELD is a HTTP request field (uri, host, etc).
# OP is a string comparison operator (eq, prefix, etc).
# ARG is an argument for the operator ("/foo/bar.html", "example.com", etc)
#
# A "match" entry is a single instruction for the load balancer that says:
#   take the FIELD of http request, compare it with ARG using OP,
#   and if they match, then send the request to the specified GROUP.
#
# For every HTTP request, the load balancer executes all "match" instructions
# sequentially until there is a match. If no match is found, then the request
# is dropped.
#
# Supported FIELD keywords:
#  - uri
#      Actually only a part of URI containing the path and the query string
#      (e.g. "/abs/path.html?query&key=val#fragment").
#  - host
#      The host part from URI in HTTP request line, or the value of Host header.
#      Host in URI takes priority over the Host header value.
#  - hdr_host
#      The "Host" header value only.
#  - hdr_conn
#      The "Connection" header value.
#  - hdr_raw
#      Any other header whose name is specified by the ARG, like this:
#         rule group hdr_raw eq     "X-Forwarded-For: 127.0.0.1";
#         rule group hdr_raw prefix "User-Agent: Bot";
#      Only hdr_raw requires the name, other headers require only a value to be
#      specified in the ATG. Also, hdr_raw may be slow because it walks over
#      all headers of a HTTP request.
#
# Supported OP keywords (comparison operations):
#  - eq - FIELD is fully equal to the PATTERN string.
#  - prefix - FIELD starts with PATTERN.
# Actually each FIELD may implement its own set of operators, but currently they
# all use same case-insensitive string comparison operations.
#
# Example:
#   srv_group static { ... }
#   srv_group foo_app { ... }
#   srv_group bar_app { ... }
# 
#   sched_http_rules {
#       match static   uri       prefix  "/static";
#       match static   host      prefix  "static.";
#       match foo_app  host      eq      "foo.example.com";
#       match bar_app  hdr_conn  eq      "keep-alive";
#       match bar_app  hdr_host  prefix  "bar.";
#       match bar_app  hdr_raw   prefix  "X-Custom-Bar-Hdr: ";
#   }
#
# Also, there's a special default match rule that matches any request.
# If specified, the default rule must come last in the list of rules.
# All requests that didn't match any rule are routed to the server group
# specified in the default rule.
# If a default match rule is not defined, and there's the default group
# with servers defined outside of any group, then the default rule is
# added implicitly to route requests to the default group.
#
# Syntax:
#     match GROUP * * *
#
# Default:
#   No rules defined. If there's the default group, then the default match
#   rule is added to route HTTP requests to the "default" group. Otherwise,
#   the request doesn't match any rule, and is dropped.
#
