#
# The configuration file for the Tempesta FW "HTTP" load balancing scheduler.
#
# The HTTP scheduler is able to look inside a HTTP request and examine its
# fields such as URI and headers. The scheduler distributes HTTP requests over
# back-end servers depending on contents of these fields.
#
# The whole goal of this configuration is to provide a set of pattern-matching
# rules that map certain field valus to back-end servers. Say, something like:
#    if the HTTP request has URI "/foo/bar" then send it to server 10.0.0.1
#    if the HTTP request host is "*.example.com", then send it to 10.0.0.2
#    ...etc
#
# An example is located at the end of this file.
# That should help you to understand how the configuration should look like. 
# 
# "include" directives are not supported yet, so paste rules to your main
# configuration file. 
#

# TAG: sched_http
#
# The section owned by the module.
# Contains nested 'backend_group' and 'rule' entries, e.g.:
#   sched_http {
#       backend_group {
#           ...;
#       }
#       backend_group {
#           ...;
#       }
#       ...
#       rule ...;
#       rule ...;
#       ...
#   }
#
# No default contents.
# The scheduler would not work without specifying any contents explicitly.

# TAG: backend_group
#
# Groups several IP addresses into one entity.
#
# Syntax:
#   backend_group NAME {
#       backend IPADDR[:PORT];
#       ...
#   } 
#
# NAME is a unique identifier of the group used to refer it later.
# 
# IPADDR[:PORT] is an address/port of a server previously defined in the
# configuration file by a 'backend' entry (see: backend).
#
# That means that you have to specify each backend address twice, e.g.:
#   backend 127.0.0.1:80;
#   sched_http {
#       backend_group foo {
#           backend 127.0.0.1:80;
#       }
#   }
# That happens because the scheduler module is not responsible for connecting to
# back-end servers, and therefore it doesn't handle 'backend' entries.
# It only collects already existing servers into groups, so you have to refer
# to already existing 'backend' configuration entries.
#
# When a backend_group is defined, it may then be used in 'rule' entries
# to route HTTP requests to the group instead of a single server (see: rule).
#
# Within the group, load is balanced across servers in the round-robin manner. 
#
# Examples:
#   backend_group static_storage {
#       backend 10.10.0.1;
#       backend 10.10.0.2:8080;
#       backend [fc00::3]:8080;
#   }
#

# TAG: rule
#
# A pattern-matching rule for HTTP requests.
#
# Syntax:
#   rule BEGROUP FIELD OP PATTERN
#   rule BEGROUP  uri|host|hdr_host|hdr_conn|hdr_raw  eq|prefix  PATTERN
#
# BEGROUP is the reference to previously defined 'backend_group'.
# 
# FIELD, OP and PATTERN form a single pattern-matching "instruction" that
# compares a FIELD (of a HTTP request) against PATTARN using OP (the operator).
# If the request matches, then it is sent to the BEGROUP (see: backend_group).
# If it doesnt' match, the next rule is processed.
#
# FIELD is a keyword that denotes a field of HTTP request.
# Supported fields:
#  - uri
#      Actually only a part of URI from request line containing path and query
#      string (e.g. "/abs/path.html?query&key=val#fragment").  
#  - host
#      The host from URI in HTTP request line or the value of Host header.
       Host from URI takes priority over the Host header value.
#  - hdr_host
#      The "Host" header only.
#  - hdr_conn
#      The "Connection" header.
#  - hdr_raw
#      Any other header whose name is specified by the PATTERN, like this:
#         rule group hdr_raw eq     "X-Forwarded-For: 127.0.0.1";
#         rule group hdr_raw prefix "User-Agent: Bot";
#      Only hdr_raw requires the name, other headers require only value to be
#      specified in the PATTERN. Also, hdr_raw may be slow because it walks over
#      all headers of a HTTP request. 
#
# OP is the operator. Currently there are two of them:
#  - eq - FIELD is fully equal to the PATTERN string.
#  - prefix - FIELD starts with PATTERN.
# Actually each FIELD may implement its own set of operators, but currently they
# all use same case-insensitive string comparison operations.
#
# PATTERN is a string enclosed to double quotes.
#
# Examples:
#   rule group1 host	 eq	"static.example.com";
#   rule group1 host	 prefix "static.";
#   rule group2 uri	 prefix	"/foo/bar";
#   rule group2 hdr_conn eq	"keep-alive";
#   rule group2 hdr_raw  prefix	"User-Agent: Mozilla";
#   rule group2 hdr_raw  eq	"X-Forwarded-For: example.com";
#

# Example of a complete sched_http section:
sched_http {
	backend_group static {
		10.0.1.1:80;
		10.0.1.2:80;
		10.0.1.3:80;
	}
	backend_group app {
		10.0.2.1:80;
	}
	backend_group billing {
		10.0.2.2:80;
	}
	
	# Note that rules are "executed" in the same order as they are
	# specified here. If you put something like "uri prefix /" as the first
	# rule, then rest of the list will never be reached.
	
	rule static  uri     prefix "/static";
	rule static  host    prefix "static.";
	rule app     host    eq     "app.example.com";
	rule billing host    eq     "billing.app.example.com";
	rule billing hdr_raw prefix "X-Billing-Custom-Hdr: ";
	rule app     uri     prefix "/";
}
